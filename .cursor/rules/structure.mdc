---
alwaysApply: true
---
# Code Standards

## File Structure
```
sand-castle-game/
â”œâ”€â”€ index.html                  # Main HTML file
â”œâ”€â”€ tsconfig.json              # TypeScript configuration
â”œâ”€â”€ vite.config.ts             # Vite configuration
â”œâ”€â”€ .eslintrc.json             # ESLint configuration
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main.ts                # Game initialization and scene registration
â”‚   â”œâ”€â”€ types/                 # TypeScript type definitions
â”‚   â”‚   â”œâ”€â”€ Game.ts           # Game-specific types and interfaces
â”‚   â”‚   â””â”€â”€ Physics.ts        # Physics-related types and constants
â”‚   â”œâ”€â”€ i18n/                  # Internationalization system
â”‚   â”‚   â”œâ”€â”€ index.ts          # Translation system core and management
â”‚   â”‚   â”œâ”€â”€ detect.ts         # Language detection and mapping
â”‚   â”‚   â””â”€â”€ translations/     # Language-specific translation files
â”‚   â”‚       â”œâ”€â”€ en.ts         # English locale settings (minimal)
â”‚   â”‚       â””â”€â”€ ua.ts         # Ukrainian translations (complete)
â”‚   â”œâ”€â”€ scenes/               # Phaser game scenes
â”‚   â”‚   â”œâ”€â”€ MenuScene.ts      # Main menu with navigation
â”‚   â”‚   â”œâ”€â”€ GameScene.ts      # Core gameplay mechanics
â”‚   â”‚   â”œâ”€â”€ GameOverScene.ts  # Game over and victory screens
â”‚   â”‚   â”œâ”€â”€ LevelCompleteScene.ts # Level completion celebration
â”‚   â”‚   â””â”€â”€ SettingsScene.ts  # Settings and language selection
â”‚   â”œâ”€â”€ objects/              # Game object classes
â”‚   â”‚   â”œâ”€â”€ CastlePart.ts     # Castle part physics and rendering
â”‚   â”‚   â””â”€â”€ StabilityManager.ts # Physics stability calculations
â”‚   â”œâ”€â”€ utils/                # Utility functions and helpers
â”‚   â”‚   â”œâ”€â”€ AudioManager.ts   # Howler.js audio management
â”‚   â”‚   â”œâ”€â”€ PartUtils.ts      # Part spawning and sizing utilities
â”‚   â”‚   â”œâ”€â”€ DeviceUtils.ts    # Device detection and capabilities
â”‚   â”‚   â”œâ”€â”€ TextUtils.ts      # Responsive text creation helpers
â”‚   â”‚   â”œâ”€â”€ ButtonUtils.ts    # Button creation and styling helpers
â”‚   â”‚   â””â”€â”€ FirebaseConfig.ts # Firebase integration setup
â”‚   â””â”€â”€ config/               # Game configuration
â”‚       â””â”€â”€ gameConfig.ts     # Game settings, levels, and constants
â”œâ”€â”€ public/                   # Static assets
â”‚   â”œâ”€â”€ favicon.ico
â”‚   â”œâ”€â”€ manifest.json         # PWA manifest
â”‚   â””â”€â”€ assets/               # Game assets
â”‚       â”œâ”€â”€ castle-parts.svg  # Castle part graphics
â”‚       â””â”€â”€ sounds/           # Audio files
â””â”€â”€ firebase.json             # Firebase configuration
```

## Naming Conventions
- **Files**: PascalCase for classes and managers (`CastlePart.ts`, `AudioManager.ts`)
- **Classes**: PascalCase (`class StabilityManager`)
- **Functions**: camelCase (`function calculateStability()`)
- **Constants**: UPPER_SNAKE_CASE (`const MAX_PARTS = 10`)
- **Interfaces**: PascalCase with descriptive names (`interface GameState`)

## TypeScript Standards

```typescript
// Use descriptive names and strong typing
interface CastlePartData {
  id: string;
  position: { x: number; y: number };
  size: { width: number; height: number };
  velocity: { x: number; y: number };
  isStable: boolean;
}

// Use const assertions and enums for constants
const PART_TYPES = ['base', 'wall', 'tower', 'decoration'] as const;
type PartType = typeof PART_TYPES[number];

// Prefer function declarations for main functions
function checkStability(parts: CastlePartData[]): StabilityResult {
  // Implementation
}

// Use arrow functions for callbacks and short utilities
const isMoving = (part: CastlePartData) => 
  Math.abs(part.velocity.x) > 0.1 || Math.abs(part.velocity.y) > 0.1;
```

## ðŸŽ¨ Asset Requirements & Guidelines

### Visual Assets Structure
```
public/assets/
â”œâ”€â”€ images/
â”‚   â”œâ”€â”€ parts/                 # Castle part sprites
â”‚   â”œâ”€â”€ backgrounds/           # Background images
â”‚   â””â”€â”€ ui/                    # User interface elements
â””â”€â”€ sounds/
    â”œâ”€â”€ effects/               # Sound effects
    â””â”€â”€ music/                 # Background music
```

### Asset Specifications
- **Image Format**: PNG for sprites with transparency, JPG for backgrounds
- **Resolution**: 2x for retina displays, optimized for mobile
- **Color Palette**: Warm beach colors (sandy yellows, ocean blues, sunset oranges)
- **Audio Format**: WAV for effects, MP3 for music
- **File Size**: Individual images <50KB, audio files <100KB, total assets <1.5MB
- **Color Palette**: Warm beach colors (sandy yellows, ocean blues, sunset oranges)
- **Audio Format**: WAV for effects, MP3 for music
- **File Size**: Individual images <50KB, audio files <100KB, total assets <1.5MB