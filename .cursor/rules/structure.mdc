---
alwaysApply: true
---
# Code Standards

## File Structure
```
sand-castle-game/
â”œâ”€â”€ index.html                  # Main HTML file
â”œâ”€â”€ tsconfig.json              # TypeScript configuration
â”œâ”€â”€ vite.config.ts             # Vite configuration
â”œâ”€â”€ .eslintrc.json             # ESLint configuration
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main.ts                # Game initialization
â”‚   â”œâ”€â”€ types/                 # TypeScript type definitions
â”‚   â”‚   â”œâ”€â”€ Game.ts           # Game-specific types
â”‚   â”‚   â””â”€â”€ Physics.ts        # Physics-related types
â”‚   â”œâ”€â”€ i18n/                  # Internationalization
â”‚   â”‚   â”œâ”€â”€ index.ts          # Translation system core
â”‚   â”‚   â”œâ”€â”€ detect.ts         # Language detection
â”‚   â”‚   â””â”€â”€ translations/     # Translation files
â”‚   â”‚       â”œâ”€â”€ en.ts         # English locale settings (minimal)
â”‚   â”‚       â””â”€â”€ ua.ts         # Ukrainian translations
â”‚   â”œâ”€â”€ scenes/
â”‚   â”‚   â”œâ”€â”€ MenuScene.ts      # Main menu
â”‚   â”‚   â”œâ”€â”€ GameScene.ts      # Core gameplay
â”‚   â”‚   â””â”€â”€ GameOverScene.ts  # End game screen
â”‚   â”œâ”€â”€ objects/
â”‚   â”‚   â”œâ”€â”€ CastlePart.ts     # Castle part class
â”‚   â”‚   â””â”€â”€ StabilityManager.ts # Physics stability logic
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”œâ”€â”€ AudioManager.ts   # Howler.js wrapper
â”‚   â”‚   â””â”€â”€ FirebaseConfig.ts # Firebase setup
â”‚   â””â”€â”€ assets/
â”‚       â”œâ”€â”€ images/           # Castle parts, backgrounds
â”‚       â””â”€â”€ sounds/           # Audio files
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ favicon.ico
â”‚   â””â”€â”€ manifest.json         # PWA manifest
â””â”€â”€ firebase.json             # Firebase configuration
```


## Naming Conventions
- **Files**: PascalCase for classes and managers (`CastlePart.ts`, `AudioManager.ts`)
- **Classes**: PascalCase (`class StabilityManager`)
- **Functions**: camelCase (`function calculateStability()`)
- **Constants**: UPPER_SNAKE_CASE (`const MAX_PARTS = 10`)
- **Interfaces**: PascalCase with descriptive names (`interface GameState`)


## TypeScript Standards

```typescript
// Use descriptive names and strong typing
interface CastlePartData {
  id: string;
  position: { x: number; y: number };
  size: { width: number; height: number };
  velocity: { x: number; y: number };
  isStable: boolean;
}

// Use const assertions and enums for constants
const PART_TYPES = ['base', 'wall', 'tower', 'decoration'] as const;
type PartType = typeof PART_TYPES[number];

// Prefer function declarations for main functions
function checkStability(parts: CastlePartData[]): StabilityResult {
  // Implementation
}

// Use arrow functions for callbacks and short utilities
const isMoving = (part: CastlePartData) => 
  Math.abs(part.velocity.x) > 0.1 || Math.abs(part.velocity.y) > 0.1;
```

## ðŸŽ¨ Asset Requirements & Guidelines

### Visual Assets Needed
```
assets/
â”œâ”€â”€ images/
â”‚   â”œâ”€â”€ parts/                 # Castle part sprites
â”‚   â”‚   â”œâ”€â”€ base-block.png    # 80x40px, sand-colored
â”‚   â”‚   â”œâ”€â”€ wall-block.png    # 80x60px, brick texture
â”‚   â”‚   â”œâ”€â”€ tower-top.png     # 80x80px, pointed roof
â”‚   â”‚   â””â”€â”€ decoration.png    # 40x40px, flags/details
â”‚   â”œâ”€â”€ backgrounds/
â”‚   â”‚   â”œâ”€â”€ beach-bg.jpg      # 1920x1080px, beach scene
â”‚   â”‚   â””â”€â”€ sky-gradient.png  # 1920x400px, beach sky
â”‚   â””â”€â”€ ui/
â”‚       â”œâ”€â”€ button-play.png   # 120x60px, kid-friendly
â”‚       â”œâ”€â”€ button-pause.png  # 60x60px, touch-friendly
â”‚       â””â”€â”€ icons/            # 32x32px icons for UI
â””â”€â”€ sounds/
    â”œâ”€â”€ effects/
    â”‚   â”œâ”€â”€ drop.wav          # Part drop sound (0.2s)
    â”‚   â”œâ”€â”€ place-good.wav    # Successful placement (0.3s)
    â”‚   â”œâ”€â”€ place-perfect.wav # Perfect placement (0.5s)
    â”‚   â”œâ”€â”€ wobble.wav        # Unstable warning (0.1s loop)
    â”‚   â””â”€â”€ collapse.wav      # Castle collapse (1.0s)
    â””â”€â”€ music/
        â””â”€â”€ beach-ambient.mp3 # Background music (2-3min loop)
```

### Asset Specifications
- **Image Format**: PNG for sprites with transparency, JPG for backgrounds
- **Resolution**: 2x for retina displays, optimized for mobile
- **Color Palette**: Warm beach colors (sandy yellows, ocean blues, sunset oranges)
- **Audio Format**: WAV for effects, MP3 for music
- **File Size**: Individual images <50KB, audio files <100KB, total assets <1.5MB