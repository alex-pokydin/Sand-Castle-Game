---
alwaysApply: true
---
# Code Standards

## File Structure
```
sand-castle-game/
├── index.html                  # Main HTML file
├── tsconfig.json              # TypeScript configuration
├── vite.config.ts             # Vite configuration
├── .eslintrc.json             # ESLint configuration
├── src/
│   ├── main.ts                # 🎮 Pure entry point - game orchestration only
│   ├── scenes.ts              # 🎭 Scene registry - add new scenes here
│   ├── types/                 # TypeScript type definitions
│   ├── i18n/                  # Internationalization system & Translations
│   ├── scenes/                # Phaser game scenes
│   ├── objects/               # Game object classes
│   ├── components/            # Reusable UI components
│   ├── utils/                 # Utility functions and helpers
│   └── config/                # Configuration files
├── public/                    # Static assets
│   ├── favicon.ico
│   ├── manifest.json          # PWA manifest
│   └── assets/                # Game assets
└── firebase.json              # Firebase configuration
```

## 🏗️ Architecture Overview

### Modular Design Principles
- **Single Responsibility**: Each file has one clear purpose
- **Clean Entry Point**: `main.ts` is just orchestration
- **Separation of Concerns**: Configuration, logic, and utilities are separated
- **Easy Extension**: Adding features doesn't require touching core files

### Key Files and Their Roles

#### **Core Entry Points**
- `src/main.ts` - Game entry point and orchestration only
- `src/scenes.ts` - Scene registry (add new scenes here)

#### **Configuration**
- `src/config/ColorConfig.ts` - Centralized color definitions and utilities
- `src/config/TextConfig.ts` - Centralized text definitions and utilities
- `src/config/phaserConfig.ts` - Phaser engine settings (resolution, physics, etc.)
- `src/config/gameConfig.ts` - Game-specific settings (levels, gameplay constants)

#### **Components**
- `src/components/` - Reusable UI components for consistent user interface
- Components are self-contained with direct imports: `import { UserButton } from '@/components/UserButton'`

#### **System Management**
- `src/utils/SystemInitializer.ts` - Orchestrates all system startup
- `src/utils/GameEventHandlers.ts` - Game-wide event handling
- `src/utils/MobileEventHandlers.ts` - Mobile optimizations

#### **Development**
- `src/utils/DebugConsole.ts` - All debug functions for development

## 🎯 How to Extend the Game

### Adding a New Scene
```typescript
// 1. Create your scene class extending BaseScene
export class TutorialScene extends BaseScene {
  constructor() {
    super('TutorialScene');
    this.setBackgroundMusic('menu-theme'); // Optional
  }
  
  protected async customPreload(): Promise<void> { /* ... */ }
  protected customCreate(): void { /* ... */ }
  protected onLanguageChanged(): void { /* ... */ }
}

// 2. Add to src/scenes.ts (ONLY file that needs editing)
import { TutorialScene } from '@/scenes/TutorialScene';

export const SCENES: Record<string, typeof BaseScene> = {
  'MenuScene': MenuScene,
  'GameScene': GameScene,
  'TutorialScene': TutorialScene,  // ← Add this line
  // ... other scenes
};
```

### Modifying Game Configuration
```typescript
// Engine settings: Edit src/config/phaserConfig.ts
export const phaserConfig = {
  width: 800,
  height: 600,
  // ... Phaser settings
};

// Game settings: Edit src/config/gameConfig.ts  
export const GAME_CONFIG = {
  maxLevels: 10,
  scoreMultiplier: 100,
  // ... game constants
};
```

### Adding Debug Functions
```typescript
// Edit src/utils/DebugConsole.ts
export function setupDebugConsole(game: Game): void {
  // Add your debug functions here
  (window as any).myNewDebugFunction = () => {
    console.log('Custom debug function');
  };
}
```

### Adding System Initialization
```typescript
// Edit src/utils/SystemInitializer.ts
private async initializeSystems(): Promise<void> {
  await Promise.all([
    this.initializeAudioSystem(),
    this.initializeMyNewSystem(), // ← Add new system here
    // ... other systems
  ]);
}
```

## Naming Conventions
- **Files**: PascalCase for classes and managers (`CastlePart.ts`, `AudioManager.ts`)
- **Classes**: PascalCase (`class StabilityManager`)
- **Functions**: camelCase (`function calculateStability()`)
- **Constants**: UPPER_SNAKE_CASE (`const MAX_PARTS = 10`)
- **Interfaces**: PascalCase with descriptive names (`interface GameState`)

## TypeScript Standards

```typescript
// Use descriptive names and strong typing
interface CastlePartData {
  id: string;
  position: { x: number; y: number };
  size: { width: number; height: number };
  velocity: { x: number; y: number };
  isStable: boolean;
}

// Use const assertions and enums for constants
const PART_TYPES = ['base', 'wall', 'tower', 'decoration'] as const;
type PartType = typeof PART_TYPES[number];

// Prefer function declarations for main functions
function checkStability(parts: CastlePartData[]): StabilityResult {
  // Implementation
}

// Use arrow functions for callbacks and short utilities
const isMoving = (part: CastlePartData) => 
  Math.abs(part.velocity.x) > 0.1 || Math.abs(part.velocity.y) > 0.1;
```

## 🎨 Asset Requirements & Guidelines

### Visual Assets Structure
```
public/assets/
├── images/
│   ├── parts/                 # Castle part sprites
│   ├── backgrounds/           # Background images
│   └── ui/                    # User interface elements
└── sounds/
    ├── effects/               # Sound effects
    └── music/                 # Background music
```

### Asset Specifications
- **Image Format**: PNG for sprites with transparency, JPG for backgrounds
- **Resolution**: 2x for retina displays, optimized for mobile
- **Color Palette**: Warm beach colors (sandy yellows, ocean blues, sunset oranges)
- **Audio Format**: WAV for effects, MP3 for music
- **File Size**: Individual images <50KB, audio files <100KB, total assets <1.5MB
- **Color Palette**: Warm beach colors (sandy yellows, ocean blues, sunset oranges)
- **Audio Format**: WAV for effects, MP3 for music
- **File Size**: Individual images <50KB, audio files <100KB, total assets <1.5MB